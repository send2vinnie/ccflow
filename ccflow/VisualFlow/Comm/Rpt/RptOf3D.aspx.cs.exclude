using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Microsoft.Web.UI.WebControls;
using BP.Rpt;
using BP.En;
using BP.En.Base;
using BP.DA;
using BP.Sys;
using BP.Web.Controls ; 
using OWC10;
using System.Xml;


namespace BP.Web.Comm.Rpt
{
	/// <summary>
	/// GenerRpt 的摘要说明
	/// </summary>
	public class UIRptOf3D : WebPage
	{
		 
		protected BP.Web.Controls.BPToolBar BPToolBar2;
		protected BP.Web.Controls.BPPanel BPPanel1;
		protected BP.Web.Controls.BPToolBar BPToolBar1;
		protected System.Web.UI.WebControls.Label Label1;
		protected BP.Web.Controls.WebMenu WebMenu1;
		/// <summary>
		/// 是否是Chart.
		/// </summary>
		public bool IsChart
		{
			get
			{
				if (this.DDL_D4.SelectedItemStringVal=="rpt")
					return false;
				else
					return true;
			}
		}
		public BP.Web.Comm.Rpt.UCRpt UCRpt1
		{
			get
			{
				return (BP.Web.Comm.Rpt.UCRpt)this.FindControl("UCRpt1");
			}
		}

		#region 属性
		/// <summary>
		/// 报表类
		/// </summary>
		public string RptName
		{
			get
			{
				return this.Request.QueryString["RptName"];
			}
		}
		private Rpt3D _HisRpt3D=null;
		public Rpt3D HisRpt3D
		{
			get
			{
				if (_HisRpt3D==null)
				{
					try
					{
						_HisRpt3D=(Rpt3D)DA.ClassFactory.GetObject(this.RptName) ;
					}
					catch(Exception ex)
					{
						throw ex;
						//	this.Response.Write("class name error"+this.RptName+" exception:"+ex.Message);
						///isRpt3D = new BP.Tax.Rpt.TaxpayerRpt();
					}
				}
				return _HisRpt3D;
			}
		}
 
		/// <summary>
		/// 纬度1下拉框。
		/// </summary>
		public ToolbarDDL DDL_D1
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D1");
			}
		}
		/// <summary>
		/// 纬度2下拉框。
		/// </summary>
		public ToolbarDDL DDL_D2
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D2");
			}
		}
		/// <summary>
		/// 纬度3下拉框。
		/// </summary>
		public ToolbarDDL DDL_D3
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D3");
			}
		}
		/// <summary>
		/// 纬度2下拉框。
		/// </summary>
		public ToolbarDDL DDL_D4
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D4");
			}
		}
		public ToolbarDDL DDL_PM
		{
			get
			{
				return this.BPToolBar2.GetDDLByKey("DDL_PM");
			}
		}
		public ToolbarDDL DDL_AO
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_AO");
			}
		}
		#endregion


		#region ToolbarTB
		public ToolbarTB TB_Width
		{
			get
			{
				return this.BPToolBar1.GetTBByID("TB_Width");
			}
		}
		public ToolbarTB TB_Height
		{
			get
			{
				return this.BPToolBar1.GetTBByID("TB_Height");
			}
		}
		/// <summary>
		/// 合计
		/// </summary>
		public ToolbarCB CB_Sum
		{
			get
			{
				return this.BPToolBar2.GetToolbarCBByKey("CB_Sum");
			}
		}
		public ToolbarCB CB_Subtotal
		{
			get
			{
				return this.BPToolBar2.GetToolbarCBByKey("CB_Subtotal");
			}
		}
//		public ToolbarLab Lab_Title
//		{
//			get
//			{
//				return this.BPToolBar1.GetLabByKey("Lab_Title");
//			}
//		}
		public ToolbarCB CB_SubtotalLeft
		{
			get
			{
				return this.BPToolBar2.GetToolbarCBByKey("CB_SubtotalLeft");
			}
		}
		 
		/// <summary>
		/// 是否纵向比
		/// </summary>
		public PercentModel  myPercentModel
		{
			get
			{ 
				return (PercentModel)this.DDL_PM.SelectedItemIntVal;
			}
		}
		#endregion
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			this.Label1.Controls.Add( this.GenerLabel( "<img src='"+this.Request.ApplicationPath+"/Images/Pub/Rpt.ico' border=0 />"+this.HisRpt3D.Title ) ); 

			//this.WebMenu1.BindRpt(this.HisRpt3D, "sss");
			this.BPToolBar1.CheckChange += new System.EventHandler(this.BPToolBar2_ButtonClick);
			this.BPToolBar1.ButtonClick += new EventHandler(BPToolBar1_ButtonClick);
			this.BPToolBar2.ButtonClick += new System.EventHandler(this.BPToolBar2_ButtonClick);

			//this.BPToolBar2.CheckChange+=new EventHandler(BPToolBar2_CheckChange);
			if (this.IsPostBack==false)
			{
				// 增加分析对象
				this.BPToolBar1.AddLab("lab32","分析对象");
				this.BPToolBar1.AddDDL("DDL_AO", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				this.BPToolBar2.InitByMap(false,HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs,null); 
				this.BPToolBar1.AddLab("Lab_ChoseD1","行指标");
				this.BPToolBar1.AddDDL("DDL_D1", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				this.BPToolBar1.AddLab("Lab_ChoseD2","列指标");
				this.BPToolBar1.AddDDL("DDL_D2", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				//this.BPToolBar1.AddLabWithIcon("Lab_ChoseD3","项目3");
				this.BPToolBar1.AddLab("Lab_ChoseD3","列指标");
				this.BPToolBar1.AddDDL("DDL_D3", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				

				foreach(AnalyseObj ao in this.HisRpt3D.HisAnalyseObjs)
					this.DDL_AO.Items.Add(new ListItem(ao.DataProperty,ao.OperationColumn));

				this.BPToolBar1.AddLab("Lab_ChoseChart","方式");
				this.BPToolBar1.AddDDL("DDL_D4", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				this.DDL_D4.Items.Add( new ListItem("报表","rpt") );
				this.DDL_D4.Items.Add( new ListItem("柱状图","a") );
				DDL_D4.Items.Add( new ListItem("饼图","b") );
				DDL_D4.Items.Add( new ListItem("折线图","c") );

				this.BPToolBar1.AddLab("Lab_ChoseWidth","宽");
				this.BPToolBar1.AddTB("TB_Width",2);

				this.BPToolBar1.AddLab("Lab_ChoseHeight","高");
				this.BPToolBar1.AddTB("TB_Height",2);

				this.TB_Height.Text="600";
				this.TB_Width.Text="800";
			
				this.BPToolBar1.AddSpt("sptD1");
				//this.BPToolBar1.AddBtn(NamesOfBtn.DataCheck);
				this.BPToolBar1.AddBtn(NamesOfBtn.Help);

				this.BPToolBar2.AddSpt("sptD1");
				//	this.BPToolBar2.AddBtn(NamesOfBtn.Chart);

				if (this.HisRpt3D.IsShowRate)
				{
					//this.BPToolBar2.AddLab("lab_","方式");
					this.BPToolBar2.AddDDL("DDL_PM", new System.EventHandler( this.DDL_PMSelectedIndexChanged ),true);
					DDL_PM.Items.Add( new ListItem("不显示","0") );
					DDL_PM.Items.Add( new ListItem("纵向比","1") );
					DDL_PM.Items.Add( new ListItem("横向比","2") );
				}

				if (this.HisRpt3D.IsShowSum)
				{
					this.BPToolBar2.AddCB("CB_Sum","大合计",true,true);
					this.BPToolBar2.AddCB("CB_Subtotal","小计",true,true);
					this.BPToolBar2.AddCB("CB_SubtotalLeft","左合计",true,true);
				}
				//this.BPToolBar1.AddBtn(NamesOfBtn.ChoseCols);
				//this.BPToolBar1.AddBtn(NamesOfBtn.DataGroup);
				//this.BPToolBar1.AddBtn(NamesOfBtn.DataGroup);
				this.InitBindToolBarDDL();
				this.BindRpt();
			}

			this.DDL_D1.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			this.DDL_D2.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			this.DDL_D3.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			this.DDL_D4.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			this.DDL_PM.SelectedIndexChanged+=new EventHandler(DDL_PMSelectedIndexChanged);
			this.DDL_AO.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);

			 
			if (this.IsChart)
			{
				this.TB_Height.Enabled=true;
				this.TB_Width.Enabled=true;

				if (this.HisRpt3D.IsShowSum)
				{
					this.DDL_PM.Enabled=false;
				}

				if (this.HisRpt3D.IsShowSum)
				{
					this.CB_Sum.Enabled=false;
					this.CB_Subtotal.Enabled=false;
					this.CB_SubtotalLeft.Enabled=false;
				}
			}
			else
			{
				this.TB_Height.Enabled=false;
				this.TB_Width.Enabled=false;

				if (this.HisRpt3D.IsShowSum)
					this.DDL_PM.Enabled=true;

				if (this.HisRpt3D.IsShowSum)
				{
					this.CB_Sum.Enabled=true;
					this.CB_Subtotal.Enabled=true;
					this.CB_SubtotalLeft.Enabled=true;
				}
			}
		}
		/// <summary>
		/// BindToolBarDDL
		/// </summary>
		public void InitBindToolBarDDL()
		{
			Attrs attrs = this.HisRpt3D.DAttrs;

			ToolbarDDL ddl1 = this.DDL_D1;
			foreach(Attr attrDd in attrs)
			{
				ddl1.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) ) ;			
			}
			ddl1.SetSelectItem(this.HisRpt3D.AttrOfD1);

			ToolbarDDL ddl2 = this.DDL_D2;
			foreach(Attr attrDd in attrs)
			{
				if (attrDd.Key==this.HisRpt3D.AttrOfD1)
					continue;
				ddl2.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) ) ;			
			}
			ddl2.SetSelectItem(this.HisRpt3D.AttrOfD2);


			ToolbarDDL ddl3 = this.DDL_D3;
			foreach(Attr attrDd in attrs)
			{
				if (attrDd.Key==this.HisRpt3D.AttrOfD1)
					continue;
				ddl3.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) ) ;
			}
			ddl3.SetSelectItem(this.HisRpt3D.AttrOfD3);
		}

		#region Web 窗体设计器生成的代码
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: 该调用是 ASP.NET Web 窗体设计器所必需的。
			//
			InitializeComponent();
			base.OnInit(e);
		}
		/// <summary>
		/// 设计器支持所需的方法 - 不要使用代码编辑器修改
		/// 此方法的内容。
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion

		private void BPToolBar2_ButtonClick(object sender, System.EventArgs e)
		{
			ToolbarButton btn  = (ToolbarButton)sender;
			switch(btn.ID)
			{
				case NamesOfBtn.DataCheck:			
					this.InvokeDataCheck(this.HisRpt3D.HisEns);
					return;
				case NamesOfBtn.Help:
					this.WinOpen("Help.htm","help","help",600,700,10,10,false,false);
					return;
				case NamesOfBtn.Search:
					this.BindRpt();
					break;
				case NamesOfBtn.Chart:
					this.BindRpt();
					break;
				default:					
					this.BindRpt();
					break;
			}
		}

		#region bind 
		public void Bind()
		{
			if (this.IsChart)
				this.BindRptChart();
			else
				this.BindRpt();
		}
		public void BindRptChart()
		{
			this.BindRpt();		 
		}
		public void Bind2DRpt()
		{
			Entities d1=this.HisRpt3D.GetDEns(this.DDL_D1.SelectedItemStringVal);
			//d1.RetrieveAll();
			Entities d2=this.HisRpt3D.GetDEns(this.DDL_D2.SelectedItemStringVal);
			//d2.RetrieveAll();
			this.HisRpt3D.AttrOfD1 = this.DDL_D1.SelectedItemStringVal;
			this.HisRpt3D.AttrOfD2 = this.DDL_D2.SelectedItemStringVal;
			this.HisRpt3D.AttrOfD3 = this.DDL_D3.SelectedItemStringVal;
			string d1Field="";
			string d2Field="";
			try
			{
				d1Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.DDL_D1.SelectedItemStringVal).Field;
				d2Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.DDL_D2.SelectedItemStringVal).Field;
			}
			catch(Exception ex)
			{
				throw new Exception("@可能是纬度属性设置错误。"+ex.Message);
			}
			string table=this.HisRpt3D.HisEns.GetNewEntity.EnMap.PhysicsTable;

			string sql="";
			switch(this.HisRpt3D.HisEn.EnMap.EnDBUrl.DBType)
			{
				case DBType.Oracle9i:
					sql="SELECT "+table+"."+d1Field+", "+table+"."+d2Field+", "+this.DDL_AO.SelectedItemStringVal+ SqlBuilder.GenerFormOfOracle9i(this.HisRpt3D.HisEn)
						+this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) +
						" GROUP BY "+table+"."+d1Field+","+table+"."+d2Field;
					break;					
				default:
					sql="SELECT "+d1Field+", "+d2Field+", "+this.DDL_AO.SelectedItemStringVal+" FROM "+
						table +" "+this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) +
						" GROUP BY "+d1Field+","+d2Field;
					break;
			}

//			string sql="SELECT "+d1Field+", "+d2Field+", "+this.DDL_AO.SelectedItemStringVal+" FROM "+
//				table +" "+this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) +
//				" GROUP BY "+d1Field+","+d2Field;
//			//this.Response.Write(sql);
			DataTable dt = DBAccess.RunSQLReturnTable(sql);
			string searchAttr=this.GenerSearchAttrString();
			//this.Response.Write("ssss"+Sys.SysEnsRefs.GetRefSubEnKey(d1.ToString(),d2.ToString()));

			// 取出 分析目标的 adt 类型.
			AnalyseDataType adt = this.HisRpt3D.HisAnalyseObjs.GetAnalyseObjByOperationColumn(this.DDL_AO.SelectedItemStringVal).HisADT;
			//RptPlanarEntity rpt = new RptPlanarEntity(d1,d2,dt,"RptOf3D2DDtl.aspx?RptEns="+this.HisRpt3D.HisEns.ToString()+"&RptName="+this.HisRpt3D.ToString()+searchAttr,adt);
			RptPlanarEntity rpt = new RptPlanarEntity(d1,d2,dt,"RptOf3D2DDtl.aspx?RptEns="+this.HisRpt3D.HisEns.ToString()+"&RptName="+this.HisRpt3D.ToString()+searchAttr,adt);
			rpt.Title=this.HisRpt3D.Title.Replace("@xyer",this.DDL_D2.SelectedItem.Text) ;
			rpt.CutNotRefD1();
			rpt.CutNotRefD2();

			rpt.Key1=d1Field;
			rpt.Key2=d2Field;
			rpt.DataProperty=this.DDL_AO.SelectedItem.Text;

			switch(this.DDL_D4.SelectedItemStringVal)
			{
				case "rpt":
					this.UCRpt1.BindRpt(rpt,false,true,true, this.myPercentModel);
					break;
				case "a":
					//this.UCGraphics1.BindHistogram(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				case "b":
					//this.UCGraphics1.BindPie(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				case "c":
					//this.UCGraphics1.BindLine(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				default:
					break;
			}
			/*

			if (this.IsChart)
			{
				if (this.DDL_D4.SelectedItemStringVal=="a")
				{
					this.UCGraphics1.BindHistogram(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
				}
				else if (this.DDL_D4.SelectedItemStringVal=="b")
				{
					this.UCGraphics1.BindLine(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
				}
				else
				{
					this.UCGraphics1.BindPie(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
				}
			}
			else
			{
				this.UCRpt1.BindRpt(rpt,false,true,true, this.myPercentModel );
			}
			*/
			//RptPlanarEntity rpt = new RptPlanarEntity(d1,d2,);
		}
		public void BindRpt()
		{
			//判断d2. d3 是否相等。如果d2==d3输出2纬报表。
			if (this.DDL_D3.SelectedItemStringVal==this.DDL_D2.SelectedItemStringVal)
			{
				this.Bind2DRpt();
				return;
			}

			this.HisRpt3D.AttrOfD1 = this.DDL_D1.SelectedItemStringVal;
			this.HisRpt3D.AttrOfD2 = this.DDL_D2.SelectedItemStringVal;
			this.HisRpt3D.AttrOfD3 = this.DDL_D3.SelectedItemStringVal;

			Entities d1=this.HisRpt3D.GetDEns(this.DDL_D1.SelectedItemStringVal);
			//d1.RetrieveAll();
			Entities d2 =this.HisRpt3D.GetDEns(this.DDL_D2.SelectedItemStringVal);
			//d2.RetrieveAll();
			Entities d3 = this.HisRpt3D.GetDEns(this.DDL_D3.SelectedItemStringVal);
			//d3.RetrieveAll();

			string d1Field="";
			string d2Field="";
			string d3Field="";
			try
			{
				d1Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.DDL_D1.SelectedItemStringVal).Field;
				d2Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.DDL_D2.SelectedItemStringVal).Field;
				d3Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.DDL_D3.SelectedItemStringVal).Field;
			}
			catch(Exception ex)
			{
				throw new Exception("@可能是纬度属性设置错误。"+ex.Message);
			}

			string table=this.HisRpt3D.HisEns.GetNewEntity.EnMap.PhysicsTable+" ";
			string pk=HisRpt3D.HisEn.PKField;
			string pkDesc=HisRpt3D.HisEn.EnMap.GetAttrByKey(pk).Desc;
			string where=this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) ;

			// 判断数据是否完整性.
			string numMsg="";
			string sqlNum="SELECT "+pk+" as "+pkDesc+", "+d1Field+"  as "+this.DDL_D1.SelectedItem.Text+",  "+d2Field+" as "+this.DDL_D2.SelectedItem.Text+", "+d3Field+" as "+this.DDL_D3.SelectedItem.Text+" FROM "+table+ where+ " and  ("+d1Field+" IS NULL OR  "+d1Field+"='' OR "+d2Field+" IS NULL OR  "+d2Field+"='' OR "+d3Field+" IS NULL OR  "+d3Field+"='' ) ";
			DataTable dt=DBAccess.RunSQLReturnTable(sqlNum);
			if (dt.Rows.Count!=0)
			{
				numMsg+="@出现["+dt.Rows.Count+"]行空值,这些空值会导致大合计与小合计不正确,这些数据是由于录入不规范造成的,它回给其他的功能造成影响,请核实情况尽快处理.列表如下:";
				numMsg+="<TABLE width='100%' id='AutoNumber1' border='1'>\n";
				numMsg+="<TR>\n";
				numMsg+=" <TD bgcolor='#C0C0C0' >"+pkDesc+"</TR>\n";		
				numMsg+=" <TD bgcolor='#C0C0C0' >"+DDL_D1.SelectedItem.Text+"</TD>\n";
				numMsg+=" <TD bgcolor='#C0C0C0' >"+DDL_D2.SelectedItem.Text+"</TD>\n";
				numMsg+=" <TD bgcolor='#C0C0C0' >"+DDL_D3.SelectedItem.Text+"</TD>\n";
				numMsg+="</TR>\n";

				foreach(DataRow dr in dt.Rows)
				{
					numMsg+="<TR>\n";
					numMsg+="  <TD>"+dr[0].ToString()+"</TD>\n";

					numMsg+="  <TD>"+EnExt.GetTextByValue(d1,dr[1].ToString(),"<font color=red>空值</font>" )+"</TD>\n";
					numMsg+="  <TD>"+EnExt.GetTextByValue(d2,dr[2].ToString(),"<font color=red>空值</font>" )+"</TD>\n";
					numMsg+="  <TD>"+EnExt.GetTextByValue(d3,dr[3].ToString(),"<font color=red>空值</font>" )+"</TD>\n";

					numMsg+="</TR>\n";
				}
				numMsg+="</TABLE>";
			}

			if (numMsg!="")
				this.ResponseWriteRedMsg(numMsg);
 

			string sql="SELECT "+d1Field+", "+d2Field+", "+d3Field+", "+this.DDL_AO.SelectedItemStringVal+" FROM "+
				table +" "+where+
				" GROUP BY "+d1Field+", "+d2Field+","+d3Field;
			//this.ResponseWriteBlueMsg(sql);
			dt = DBAccess.RunSQLReturnTable(sql);

			//this.Response.Write("ssss"+Sys.SysEnsRefs.GetRefSubEnKey(d1.ToString(),d2.ToString())) ; 

			#region 把查询条件，产生一个查询字符串,发送到明晰叶面上。
			string searchAttr=this.GenerSearchAttrString();
			#endregion

			Rpt3DEntity rpt = new Rpt3DEntity(d1,d2,d3,dt,"RptOf3DDtl.aspx?RptEns="+this.HisRpt3D.HisEns.ToString()+"&RptName="+this.HisRpt3D.ToString()+searchAttr );
			// 
			//rpt.D2D3RefKey=BP.Sys.SysEnsRefs.GetRefSubEnKey(d2.ToString(),d3.ToString());
			// 
			rpt.CutNotRefD1();
			rpt.CutNotRefD2();
			rpt.CutNotRefD3();

			rpt.Key1=d1Field;
			rpt.Key2=d2Field;
			rpt.Key3=d3Field;

			rpt.CellUrlTarget="ss";
			rpt.DataProperty =this.DDL_AO.SelectedItem.Text; //数据属性。
			//this.Response.Write(rpt.D2D3RefKey) ;
			rpt.Title=this.HisRpt3D.Title.Replace("@xyer",this.DDL_D2.SelectedItem.Text) ;

			// 取出 分析目标的 adt 类型.    
			
  

			if (this.IsChart)
			{
				if (this.DDL_D4.SelectedItemStringVal=="a")
				{
					//this.UCGraphics1.BindHistogram(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
				}
				else if (this.DDL_D4.SelectedItemStringVal=="b")
				{
					//this.UCGraphics1.BindLine(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
				}
				else
				{
					//this.UCGraphics1.BindPie(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
				}
			}
			else
			{ 
				AnalyseDataType adt = this.HisRpt3D.HisAnalyseObjs.GetAnalyseObjByOperationColumn(this.DDL_AO.SelectedItemStringVal).HisADT;
				rpt.HisADT=adt; //设置它的分析数据类型。

				if (this.HisRpt3D.IsShowSum)
				{
					this.UCRpt1.BindRpt(rpt, this.myPercentModel , this.CB_SubtotalLeft.Selected,this.CB_Sum.Selected,this.CB_Subtotal.Selected);
				}
				else
				{
					this.UCRpt1.BindRpt(rpt, this.myPercentModel, false,false,false);
				}
			}
		}
		#endregion

		private string GenerSearchAttrString()
		{
			string searchkey="";
			foreach(Microsoft.Web.UI.WebControls.ToolbarItem item in this.BPToolBar2.Items)
			{
				if (item.ID.IndexOf("DDL")!=-1)
				{
					ToolbarDDL ddl =(ToolbarDDL)item;
					searchkey+="&"+ddl.ID+"="+ddl.SelectedItemStringVal ;
				}

				if (item.ID.IndexOf("TB")!=-1)
				{
					ToolbarTB tb =(ToolbarTB)item;
					searchkey+="&"+tb.ID+"="+tb.Text;
				}
			}
			return searchkey;
		}
		private void DDL_PMSelectedIndexChanged(object sender, EventArgs e)
		{
			this.BindRpt();
		}
		private void DDL_SelectedIndexChanged(object sender, EventArgs e)
		{
			 
			Attrs attrs = this.HisRpt3D.DAttrs;
			string d2item,d1item,d3item ;
			ToolbarDDL ddl = (ToolbarDDL)sender;
			switch(ddl.ID)
			{
				case "DDL_D1":
					d1item=this.DDL_D1.SelectedItemStringVal;

					#region set 删除2，3纬度的中的项目。
					d2item=this.DDL_D2.SelectedItemStringVal;
					this.DDL_D2.Items.Clear(); // 清除以前已经有的。
					// 加载全部的
					foreach(Attr attrDd in attrs)
					{
						if (attrDd.Key==d1item)
							continue ;  // 如果是1纬，就不加入里面。

						this.DDL_D2.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) ) ;			
					}
					// 移除1纬度已经选择的item.
					this.DDL_D2.RemoveItemByKey(d1item);
					this.DDL_D2.SetSelectItem(d2item);
					#endregion

					#region set ddl3
					d3item=this.DDL_D3.SelectedItemStringVal;
					this.DDL_D3.Items.Clear(); // 清除以前已经有的。
					// 加载全部的
					foreach(Attr attrDd in attrs)
					{
						if (attrDd.Key==d1item)
							continue ;  // 如果是1纬，就不加入里面。

						this.DDL_D3.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) ) ;			
					}
					// 移除1纬度已经选择的item.
					this.DDL_D3.RemoveItemByKey(d1item);					
					DDL_D3.SetSelectItem(d3item);
					#endregion

					#region 判断1纬选择的是否与其它的纬度有关系，如果有关系就删除它。
					/* 比如：当1纬度选择的是乡镇，2纬3纬就不能出现。管理机关。
					 * */
					Attr attrd1 =new Attr(); // find attrd1 .
					foreach(Attr attr in attrs)
					{
						if (attr.Key==d1item)
						{
							attrd1=attr;
							break;
						}
					}
				
					foreach(Attr attr in attrs)
					{
						if (attr.Key==attrd1.Key)
							continue;

						string refkey=BP.Sys.SysEnsRefs.GetRefSubEnKey(attr.UIBindKey, attrd1.UIBindKey); 
						if (refkey!=null)
						{
							/* 如果存在关系，就删除它们。*/
							this.DDL_D2.RemoveItemByKey(attr.Key);
							this.DDL_D3.RemoveItemByKey(attr.Key);
						}
					}
					#endregion

					break;
				case "DDL_D2":
					d1item=this.DDL_D1.SelectedItemStringVal;
					d2item=this.DDL_D2.SelectedItemStringVal;
					#region set ddl3

					#region 定义attrd2
					Attr attrd2 =new Attr(); // 建立attrd2一个属性.
					foreach(Attr attr in attrs)
					{
						/*全部的属性。*/
						if (attr.Key==d2item)
						{
							attrd2=attr;
							break;
						}
					}
					#endregion  定义attrd2

					d3item=this.DDL_D3.SelectedItemStringVal;
					this.DDL_D3.Items.Clear(); // 清除以前已经有的。
					// 加载全部的
					foreach(Attr attrDd in attrs)
					{
						if (attrDd.Key==d1item)
							continue ;  // 如果是1纬，就不加入里面。

						if (attrDd.UIBindKey!=d2item)
						{
							/* 如果不等于d2item 判断2纬度3纬度是否有关系存在。
							 * 存在关系判断
							 * */
							string refkey=BP.Sys.SysEnsRefs.GetRefSubEnKey(attrDd.UIBindKey, attrd2.UIBindKey); 
							if (refkey!=null)
								continue;
						}
						this.DDL_D3.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) ) ;			
					}
					DDL_D3.SetSelectItem(d3item);
					#endregion
					break;
				case "DDL_D3":
					break;
				case "DDL_AO":
					break;
				case "DDL_D4":
					break;
				case "DDL_PM":
					this.BindRpt();
					break;
				default:
					throw new Exception("error "+ ddl.ID);
			}
			this.BindRpt();
		}

//		private void BPToolBar2_CheckChange(object sender, EventArgs e)
//		{
//			this.IsChart=false;
//			this.BindRpt();
//			/*
//			ToolbarCheckButton cb =(ToolbarCheckButton)sender;
//			switch(cb.ID)
//			{
//				case "CB_Rate":
//					this.IsChart=false;
//					this.BindRpt();
//					break;
//				case "CB_Sum":
//					this.IsChart=false;
//					this.BindRpt();
//					break;
//				default:
//					break;
//			}
//			*/
		//		}

		private void BPToolBar1_ButtonClick(object sender, EventArgs e)
		{
			ToolbarButton btn  = (ToolbarButton)sender;
			switch(btn.ID)
			{
				case NamesOfBtn.DataCheck:
					this.InvokeDataCheck(this.HisRpt3D.HisEns);
					this.BindRpt();
					return;
				case NamesOfBtn.Help:
					this.Helper("Help.htm");
					//this.WinOpen("Help.htm","help","help",600,700,10,10,false,false);
					this.BindRpt();
					return;
				case NamesOfBtn.Search:
					this.BindRpt();
					break;
				case NamesOfBtn.Chart:
					this.BindRpt();
					break;
				default:					
					this.BindRpt();
					break;
			}

		}
	}
}
