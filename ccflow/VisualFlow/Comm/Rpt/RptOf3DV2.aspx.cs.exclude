using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Microsoft.Web.UI.WebControls;
using BP.Rpt;
using BP.En;
using BP.En.Base;
using BP.DA;
using BP.Sys;
using BP.Web.Controls ; 
using OWC10;
using System.Xml;

namespace BP.Web.Comm.Rpt
{
	/// <summary>
	/// GenerRpt 的摘要说明
	/// </summary>
	public class GenerRptV2 : WebPage
	{
		protected BP.Web.Controls.BPPanel BPPanel1;
		protected System.Web.UI.WebControls.Label Label1;
		protected BP.Web.Controls.WebMenu D1;
		protected BP.Web.Controls.WebMenu D2;
		protected BP.Web.Controls.WebMenu D3;
		protected BP.Web.Controls.WebMenu Cell;
		protected BP.Web.Controls.BPToolBar BPToolBar1;
		protected BP.Web.Controls.BPMultiPage BPMultiPage1;
		protected BP.Web.Controls.BPTabStrip BPTabStrip1;
		protected BP.Web.Controls.BPMultiPage Bpmultipage2;
		protected BP.Web.Controls.BPToolBar BPToolBar2;
		/// <summary>
		/// 是否是Chart.
		/// </summary>
		public bool IsChart
		{
			get
			{
				if (this.ShowType=="rpt")
					return false;
				else
					return true;
			}
		}
		public BP.Web.Comm.Rpt.UCRpt UCRpt1
		{
			get
			{
				return (BP.Web.Comm.Rpt.UCRpt)this.FindControl("UCRpt1");
			}
		}

		#region 属性
		/// <summary>
		/// 报表类
		/// </summary>
		public string RptName
		{
			get
			{
				return this.Request.QueryString["RptName"];
			}
		}
		private Rpt3D _HisRpt3D=null;
		public Rpt3D HisRpt3D
		{
			get
			{
				if (_HisRpt3D==null)
				{
					try
					{
						_HisRpt3D=(Rpt3D)DA.ClassFactory.GetObject(this.RptName) ;
					}
					catch(Exception ex)
					{
						throw ex;
						//	this.Response.Write("class name error"+this.RptName+" exception:"+ex.Message);
						///isRpt3D = new BP.Tax.Rpt.TaxpayerRpt();
					}
				}
				return _HisRpt3D;
			}
		}

		public string SD1
		{
			get
			{
				
				string key= GetSessionByKey(this.HisRpt3D.ToString(),"D1");
				if (key==null || key=="")
				{
					return this.HisRpt3D.DAttrs[0].Key;
				}
				else
				{
					return key;
				}
					
							  
			}
			set
			{
				SetSessionByKey(this.HisRpt3D.ToString(),"D1",value);
			}
		}
		public string SD2
		{
			get
			{
				return GetSessionByKey(this.HisRpt3D.ToString(),"D2");
			}
			set
			{
				SetSessionByKey(this.HisRpt3D.ToString(),"D2",value);
			}
		}
		public string SD3
		{
			get
			{
				return GetSessionByKey(this.HisRpt3D.ToString(),"D3");
			}
			set
			{
				SetSessionByKey(this.HisRpt3D.ToString(),"D3",value);
			}
		}
		public string SD1Text
		{
			get
			{
				return SD1 ;
			}
		}
		public string SD2Text
		{
			get
			{
				return SD2;
			}
		}
		public string SD3Text
		{
			get
			{
				return SD3;
			}
		}
		public string ShowType
		{
			get
			{
				return GetSessionByKey(this.HisRpt3D.ToString(),"ShowType");
			}
			set
			{
				SetSessionByKey(this.HisRpt3D.ToString(),"ShowType",value);
			}
		}		 
		/// <summary>
		/// 纬度2下拉框。
		/// </summary>
		public ToolbarDDL DDL_D4_del
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D4");
			}
		}
		public ToolbarDDL DDL_PM_del
		{
			get
			{
				return this.BPToolBar2.GetDDLByKey("DDL_PM");
			}
		}
		public ToolbarDDL DDL_AO
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_AO");
			}
		}
		public string RptState
		{
			get
			{
				string strs=(string)this.Session[ this.HisRpt3D.ToString() ];
				if ( strs==null)
				{
					strs="RptName:sdsd;D1:"+this.HisRpt3D.AttrOfD1+";D2:"+this.HisRpt3D.AttrOfD2+";D3:"+this.HisRpt3D.AttrOfD3+";ShowType:rpt;Width:800;Height:600;PercentModel:0;";
					this.RptState=strs;
				}
				return strs;
			}
			set
			{
				this.Session[this.HisRpt3D.ToString()]=value;
			}
		}
		#endregion


		#region ToolbarTB
		public ToolbarTB TB_Width
		{
			get
			{
				return this.BPToolBar1.GetTBByID("TB_Width");
			}
		}
		public ToolbarTB TB_Height
		{
			get
			{
				return this.BPToolBar1.GetTBByID("TB_Height");
			}
		}
		/// <summary>
		/// 合计
		/// </summary>
		public ToolbarCB CB_Sum
		{
			get
			{
				return this.BPToolBar2.GetToolbarCBByKey("CB_Sum");
			}
		}
		public ToolbarCB CB_Subtotal
		{
			get
			{
				return this.BPToolBar2.GetToolbarCBByKey("CB_Subtotal");
			}
		}
//		public ToolbarLab Lab_Title
//		{
//			get
//			{
//				return this.BPToolBar1.GetLabByKey("Lab_Title");
//			}
//		}
		public ToolbarCB CB_SubtotalLeft
		{
			get
			{
				return this.BPToolBar2.GetToolbarCBByKey("CB_SubtotalLeft");
			}
		}
		 
		/// <summary>
		/// 是否纵向比
		/// </summary>
		public PercentModel  myPercentModel
		{
			get
			{ 
				try
				{
					return (PercentModel)int.Parse( GetSessionByKey(this.HisRpt3D.ToString(), "PercentModel" ) );
				}
				catch(Exception ex)
				{
					throw new Exception(   GetSessionByKey(this.HisRpt3D.ToString(), "PercentModel" )+ex.Message ); 
				}
			}
			set
			{
				SetSessionByKey(this.HisRpt3D.ToString(),"PercentModel",(int)value ) ;
			}
		}
		private void DDL_SelectedIndexChanged(object sender, EventArgs e)
		{
			this.BindRpt();
		}
		#endregion
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			string mys=this.RptState;
			foreach(string s in this.Request.QueryString)
			{
				SetSessionByKey(this.HisRpt3D.ToString(), s, this.Request.QueryString[s]);
			}

			this.Label1.Controls.Add( this.GenerLabel( "<img src='"+this.Request.ApplicationPath+"/Images/Pub/Rpt.ico' border=0 />"+this.HisRpt3D.Title ) ); 
			this.BPToolBar1.CheckChange += new System.EventHandler(this.BPToolBar2_ButtonClick);
			this.BPToolBar1.ButtonClick += new EventHandler(BPToolBar1_ButtonClick);
			this.BPToolBar2.ButtonClick += new System.EventHandler(this.BPToolBar2_ButtonClick);

			//this.BPToolBar2.CheckChange+=new EventHandler(BPToolBar2_CheckChange);
			if (this.IsPostBack==false)
			{
				this.BPToolBar2.InitByMap(false,HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs,null);
				foreach(Attr at in this.HisRpt3D.HisFKSearchAttrs )
				{
					this.BPToolBar2.GetDDLByKey( "DDL_"+at.Key ).SetSelectItem( GetSessionByKey(this.HisRpt3D.ToString(), "DDL_"+at.Key )  ) ;
				}

				// 增加分析对象
				this.BPToolBar1.AddDDL("DDL_AO", new System.EventHandler( this.DDL_SelectedIndexChanged),true);

				this.BPToolBar1.AddLab("Lab2","宽");
				this.BPToolBar1.AddTB("TB_Width",2);

				this.BPToolBar1.AddLab("Lab3","高");
				this.BPToolBar1.AddTB("TB_Height",2);

				this.TB_Height.Text="400";
				this.TB_Width.Text="800";

//				this.BPToolBar1.AddLab("lab32","分析");
//				Microsoft.Web.UI.WebControls.ToolbarCheckGroup grp = new ToolbarCheckGroup();
//				//grp.
//				int i=0;
//				foreach(AnalyseObj ao in this.HisRpt3D.HisAnalyseObjs)
//				{
//					i++;
//					ToolbarCheckButton btn = new ToolbarCheckButton();
//					btn.Text=ao.DataProperty;
//					grp.Items.Add(btn);
//				}
//				this.BPToolBar1.Items.Add(grp);

				foreach(AnalyseObj ao in this.HisRpt3D.HisAnalyseObjs)
					this.DDL_AO.Items.Add(new ListItem(ao.DataProperty,ao.OperationColumn));
			
				this.BPToolBar1.AddSpt("sptD1");
				this.BPToolBar1.AddBtn(NamesOfBtn.Help);

				this.BPToolBar2.AddSpt("sptD1");

				if (this.HisRpt3D.IsShowRate)
				{
					//this.BPToolBar2.AddLab("lab_","方式");
					//this.BPToolBar2.AddDDL("DDL_PM", new System.EventHandler( this.DDL_PMSelectedIndexChanged ),true);
					//DDL_PM.Items.Add( new ListItem("不显示","0") );
					//DDL_PM.Items.Add( new ListItem("纵向比","1") );
					//DDL_PM.Items.Add( new ListItem("横向比","2") );
				}

				if (this.HisRpt3D.IsShowSum)
				{
					this.BPToolBar2.AddCB("CB_Sum","大合计",true,true);
					this.BPToolBar2.AddCB("CB_Subtotal","小计",true,true);
					this.BPToolBar2.AddCB("CB_SubtotalLeft","右合计",true,true);
				}
				 
				this.BindRpt();
			}

			this.DDL_AO.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			if (this.IsChart)
			{
				this.TB_Height.Enabled=true;
				this.TB_Width.Enabled=true;
				if (this.HisRpt3D.IsShowSum)
				{
					this.CB_Sum.Enabled=false;
					this.CB_Subtotal.Enabled=false;
					this.CB_SubtotalLeft.Enabled=false;
				}
			}
			else
			{
				this.TB_Height.Enabled=false;
				this.TB_Width.Enabled=false;
				if (this.HisRpt3D.IsShowSum)
				{
					this.CB_Sum.Enabled=true;
					this.CB_Subtotal.Enabled=true;
					this.CB_SubtotalLeft.Enabled=true;
				}
			}

			// 菜单
			this.D1.BindRpt(this.HisRpt3D,"1");
			this.D2.BindRpt(this.HisRpt3D,"2");
			this.D3.BindRpt(this.HisRpt3D,"3");
			this.Cell.BindRptCell(this.HisRpt3D);
		}

		#region Web 窗体设计器生成的代码
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: 该调用是 ASP.NET Web 窗体设计器所必需的。
			//
			InitializeComponent();
			base.OnInit(e);
		}
		/// <summary>
		/// 设计器支持所需的方法 - 不要使用代码编辑器修改
		/// 此方法的内容。
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion

		private void BPToolBar2_ButtonClick(object sender, System.EventArgs e)
		{
//			// 把查询条件设置到session.
//			foreach(AttrOfSearch attr in this.HisRpt3D.HisAttrsOfSearch )
//			{
//
//			}

			foreach(Attr at in this.HisRpt3D.HisFKSearchAttrs )
			{
				string val=this.BPToolBar2.GetDDLByKey( "DDL_"+at.Key ).SelectedItemStringVal;
				SetSessionByKey(this.HisRpt3D.ToString(), "DDL_"+at.Key, val);
			}



			ToolbarButton btn  = (ToolbarButton)sender;
			switch(btn.ID)
			{
				case NamesOfBtn.DataCheck:			
					this.InvokeDataCheck(this.HisRpt3D.HisEns);
					return;
				case NamesOfBtn.Help:
					this.WinOpen("Help.htm","help","help",600,700,10,10,false,false);
					return;
				case NamesOfBtn.Search:
					this.BindRpt();
					break;
				case NamesOfBtn.Chart:
					this.BindRpt();
					break;
				default:
					this.BindRpt();
					break;
			}
		}

		#region bind 
		public void Bind()
		{
			if (this.IsChart)
				this.BindRptChart();
			else
				this.BindRpt();
		}
		public void BindRptChart()
		{
			this.BindRpt();		 
		}
		public void Bind2DRpt()
		{
			Entities d1=this.HisRpt3D.GetDEns(this.SD1);
			//d1.RetrieveAll();
			Entities d2=this.HisRpt3D.GetDEns(this.SD2);
			//d2.RetrieveAll();

			this.HisRpt3D.AttrOfD1 = this.SD1;
			this.HisRpt3D.AttrOfD2 = this.SD2;
			this.HisRpt3D.AttrOfD3 = this.SD3;

			string d1Field="";
			string d2Field="";

			try
			{
				d1Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.SD1).Field;
				d2Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.SD2).Field;
			}
			catch(Exception ex)
			{
				throw new Exception("@可能是纬度属性设置错误。"+ex.Message);
			}

			string table=this.HisRpt3D.HisEns.GetNewEntity.EnMap.PhysicsTable;

			string sql="";
			switch(this.HisRpt3D.HisEn.EnMap.EnDBUrl.DBType)
			{
				case DBType.Oracle9i:
					sql="SELECT "+table+"."+d1Field+", "+table+"."+d2Field+", "+this.DDL_AO.SelectedItemStringVal+ SqlBuilder.GenerFormOfOracle9i(this.HisRpt3D.HisEn)
						  +this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) +
						" GROUP BY "+table+"."+d1Field+","+table+"."+d2Field;
					break;					
				default:
					sql="SELECT "+d1Field+", "+d2Field+", "+this.DDL_AO.SelectedItemStringVal+" FROM "+
						table +" "+this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) +
						" GROUP BY "+d1Field+","+d2Field;
					break;
			}
			if (SystemConfig.IsDebug)
			    this.Response.Write(sql);
			DataTable dt = DBAccess.RunSQLReturnTable(sql);
			string searchAttr=this.GenerSearchAttrString();
			//this.Response.Write("ssss"+Sys.SysEnsRefs.GetRefSubEnKey(d1.ToString(),d2.ToString()));

			// 取出 分析目标的 adt 类型.
			AnalyseDataType adt = this.HisRpt3D.HisAnalyseObjs.GetAnalyseObjByOperationColumn(this.DDL_AO.SelectedItemStringVal).HisADT;
			RptPlanarEntity rpt = new RptPlanarEntity(d1,d2,dt,"RptOf3D2DDtl.aspx?RptEns="+this.HisRpt3D.HisEns.ToString()+"&RptName="+this.HisRpt3D.ToString()+searchAttr,adt);
			rpt.Key1=this.SD1;
			rpt.Key2=this.SD2;

			rpt.CutNotRefD1();
			rpt.CutNotRefD2();
			rpt.DataProperty=this.DDL_AO.SelectedItem.Text;

			switch(this.ShowType)
			{
				case "rpt":
					this.UCRpt1.BindRpt(rpt,false,true,true, this.myPercentModel );
					break;
				case "a":
					//this.UCGraphics1.BindHistogram(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				case "b":
					//this.UCGraphics1.BindPie(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				case "c":
					//this.UCGraphics1.BindLine(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				default:
					break;
			}
 
		}
		public void BindRpt()
		{
			string numMsg="";
			string sql="";
			Entity en =this.HisRpt3D.HisEn;

			// 检查纬度 1 的数据是否完整。
			//sql=""
			//判断d2. d3 是否相等。如果d2==d3输出2纬报表。

			if (this.SD3==this.SD2)
			{
				this.Bind2DRpt();
				return;
			}

			this.HisRpt3D.AttrOfD1 = this.SD1;
			this.HisRpt3D.AttrOfD2 = this.SD2;
			this.HisRpt3D.AttrOfD3 = this.SD3;

			Entities d1=this.HisRpt3D.GetDEns(this.SD1);
			//d1.RetrieveAll();
			Entities d2 =this.HisRpt3D.GetDEns(this.SD2);
			//d2.RetrieveAll();
			Entities d3 = this.HisRpt3D.GetDEns(this.SD3);
			//d3.RetrieveAll();

			string d1Field="";
			string d2Field="";
			string d3Field="";
			try
			{
				d1Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.SD1).Field;
				d2Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.SD2).Field;
				d3Field=this.HisRpt3D.HisEn.EnMap.GetAttrByKey(this.SD3).Field;
			}
			catch(Exception ex)
			{
				throw new Exception("@可能是纬度属性设置错误。"+ex.Message);
			}

			string table=this.HisRpt3D.HisEns.GetNewEntity.EnMap.PhysicsTable;
			string pk=HisRpt3D.HisEn.PKField;
			string pkDesc=HisRpt3D.HisEn.EnMap.GetAttrByKey(pk).Desc;
			string where="";
			
			// 判断数据是否完整性.
			string sqlNum="";
			switch(en.EnMap.EnDBUrl.DBType)
			{
				case DBType.Oracle9i:
					where=this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs);
					sqlNum="SELECT "+table+"."+pk+" as "+pkDesc+", "+table+"."+d1Field+"  as "+this.SD1Text+",  "+table+"."+d2Field+" as "+this.SD2Text+", "+table+"."+d3Field+" as "+this.SD3Text+"  "+SqlBuilder.GenerFormOfOracle9i(en)+ where+ " and  ("+table+"."+d1Field+" IS NULL OR  "+table+"."+d1Field+"='' OR "+table+"."+d2Field+" IS NULL OR  "+table+"."+d2Field+"='' OR "+table+"."+d3Field+" IS NULL OR  "+table+"."+d3Field+"='' ) ";
					break;
				default:
					where=this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) ;
					sqlNum="SELECT "+pk+" as "+pkDesc+", "+d1Field+"  as "+this.SD1Text+",  "+d2Field+" as "+this.SD2Text+", "+d3Field+" as "+this.SD3Text+" FROM "+table+" "+ where + " and  ("+d1Field+" IS NULL OR  "+d1Field+"='' OR "+d2Field+" IS NULL OR  "+d2Field+"='' OR "+d3Field+" IS NULL OR  "+d3Field+"='' ) ";
					break;
			}

			DataTable dt=DBAccess.RunSQLReturnTable(sqlNum);
			if (dt.Rows.Count!=0)
			{
				numMsg+="@出现["+dt.Rows.Count+"]行空值,这些空值会导致大合计与小合计不正确,这些数据是由于录入不规范造成的,它回给其他的功能造成影响,请核实情况尽快处理.列表如下:";
				numMsg+="<TABLE width='100%' id='AutoNumber1' border='1'>\n";
				numMsg+="<TR>\n";
				numMsg+=" <TD bgcolor='#C0C0C0' >"+pkDesc+"</TR>\n";		
				numMsg+=" <TD bgcolor='#C0C0C0' >"+this.SD1Text+"</TD>\n";
				numMsg+=" <TD bgcolor='#C0C0C0' >"+this.SD2Text+"</TD>\n";
				numMsg+=" <TD bgcolor='#C0C0C0' >"+this.SD3Text+"</TD>\n";
				numMsg+="</TR>\n";

				foreach(DataRow dr in dt.Rows)
				{
					numMsg+="<TR>\n";
					numMsg+="  <TD>"+dr[0].ToString()+"</TD>\n";
					numMsg+="  <TD>"+EnExt.GetTextByValue(d1,dr[1].ToString(),"<font color=red>空值</font>" )+"</TD>\n";
					numMsg+="  <TD>"+EnExt.GetTextByValue(d2,dr[2].ToString(),"<font color=red>空值</font>" )+"</TD>\n";
					numMsg+="  <TD>"+EnExt.GetTextByValue(d3,dr[3].ToString(),"<font color=red>空值</font>" )+"</TD>\n";
					numMsg+="</TR>\n";
				}
				numMsg+="</TABLE>";
			}

			//if (numMsg!="")
				//this.ResponseWriteRedMsg(numMsg);

			sql="";
			switch(en.EnMap.EnDBUrl.DBType)
			{
				case DBType.Oracle9i:
					sql="SELECT "+table+"."+d1Field+", "+table+"."+d2Field+", "+table+"."+d3Field+","+this.DDL_AO.SelectedItemStringVal+ SqlBuilder.GenerFormOfOracle9i(this.HisRpt3D.HisEn)
						+this.BPToolBar2.InitTableSqlByEns(this.HisRpt3D.HisEns,this.HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs) +
						" GROUP BY "+table+"."+d1Field+","+table+"."+d2Field+","+table+"."+d3Field;
					break;					
				default:
					sql="SELECT "+d1Field+", "+d2Field+", "+d3Field+", "+this.DDL_AO.SelectedItemStringVal+" FROM "+
						table +" "+where+
						" GROUP BY "+d1Field+", "+d2Field+","+d3Field;
					break;
			}

			if (SystemConfig.IsDebug)
				this.Response.Write(sql);

			//this.ResponseWriteBlueMsg(sql);
			dt = DBAccess.RunSQLReturnTable(sql);
			//this.Response.Write("ssss"+Sys.SysEnsRefs.GetRefSubEnKey(d1.ToString(),d2.ToString())) ; 

			#region 把查询条件，产生一个查询字符串,发送到明晰叶面上。
			string searchAttr=this.GenerSearchAttrString();
			#endregion

			Rpt3DEntity rpt = new Rpt3DEntity(d1,d2,d3,dt,"RptOf3D2DDtl.aspx?RptEns="+this.HisRpt3D.HisEns.ToString()+"&RptName="+this.HisRpt3D.ToString()+searchAttr );
			rpt.Key1=this.SD1;
			rpt.Key2=this.SD2;
			rpt.Key3=this.SD3;

			//Rpt3DEntity rpt = new Rpt3DEntity(d1,d2,d3,dt,"RptOf3DDtl.aspx?RptEns="+this.HisRpt3D.HisEns.ToString()+"&RptName="+this.HisRpt3D.ToString()+searchAttr );
			// 
			//rpt.D2D3RefKey=BP.Sys.SysEnsRefs.GetRefSubEnKey(d2.ToString(),d3.ToString());
			// 
			rpt.CutNotRefD1();
			rpt.CutNotRefD2();
			rpt.CutNotRefD3();

			rpt.CellUrlTarget="ss";
			rpt.DataProperty =this.DDL_AO.SelectedItem.Text; //数据属性。
			// 取出 分析目标的 adt 类型.    
 
			switch(this.ShowType)
			{
				case "rpt":
					AnalyseDataType adt = this.HisRpt3D.HisAnalyseObjs.GetAnalyseObjByOperationColumn(this.DDL_AO.SelectedItemStringVal).HisADT;
					rpt.HisADT=adt; //设置它的分析数据类型。
					if (this.HisRpt3D.IsShowSum)
						this.UCRpt1.BindRpt(rpt, this.myPercentModel , this.CB_SubtotalLeft.Selected,this.CB_Sum.Selected,this.CB_Subtotal.Selected);
					else
						this.UCRpt1.BindRpt(rpt, this.myPercentModel, false,false,false);
					break;
				case "a":
					//this.UCGraphics1.BindHistogram(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				case "b":
					//this.UCGraphics1.BindPie(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				case "c":
					//this.UCGraphics1.BindLine(rpt, int.Parse(this.TB_Width.Text), int.Parse(this.TB_Height.Text))  ;
					break;
				default:
					break;
			}
			 
		}
		#endregion

		private string GenerSearchAttrString()
		{
			string searchkey="";
			foreach(Microsoft.Web.UI.WebControls.ToolbarItem item in this.BPToolBar2.Items)
			{
				if (item.ID.IndexOf("DDL")!=-1)
				{
					ToolbarDDL ddl =(ToolbarDDL)item;
					searchkey+="&"+ddl.ID+"="+ddl.SelectedItemStringVal ;
				}

				if (item.ID.IndexOf("TB")!=-1)
				{
					ToolbarTB tb =(ToolbarTB)item;
					searchkey+="&"+tb.ID+"="+tb.Text;
				}
			}
			return searchkey;
		}
		private void DDL_PMSelectedIndexChanged(object sender, EventArgs e)
		{
			this.BindRpt();
		}
		  

		private void BPToolBar1_ButtonClick(object sender, EventArgs e)
		{
			ToolbarButton btn  = (ToolbarButton)sender;
			switch(btn.ID)
			{
				case NamesOfBtn.DataCheck:
					this.InvokeDataCheck(this.HisRpt3D.HisEns);
					this.BindRpt();
					return;
				case NamesOfBtn.Help:
					this.Helper("Help.htm");
					//this.WinOpen("Help.htm","help","help",600,700,10,10,false,false);
					this.BindRpt();
					return;
				case NamesOfBtn.Search:
					this.BindRpt();
					break;
				case NamesOfBtn.Chart:
					this.BindRpt();
					break;
				default:					
					this.BindRpt();
					break;
			}

		}
	}
}
