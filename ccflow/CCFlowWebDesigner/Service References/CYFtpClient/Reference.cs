//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.235
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WF.CYFtpClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CYFtpClient.CYFtpSoap")]
    public interface CYFtpSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetServer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetServer(System.AsyncCallback callback, object asyncState);
        
        string EndGetServer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetDefaultFlowRoot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetDefaultFlowRoot(System.AsyncCallback callback, object asyncState);
        
        string EndGetDefaultFlowRoot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetFlowShareRoot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFlowShareRoot(System.AsyncCallback callback, object asyncState);
        
        string EndGetFlowShareRoot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DownloadFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDownloadFile(string srcFilePath, System.AsyncCallback callback, object asyncState);
        
        string EndDownloadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ImportFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginImportFlow(string path, System.AsyncCallback callback, object asyncState);
        
        string EndImportFlow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetFlowFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFlowFiles(string serverDirectoryPath, System.AsyncCallback callback, object asyncState);
        
        FsFileItem[] EndGetFlowFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetFolders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetFolders(string serverDirectoryPath, System.AsyncCallback callback, object asyncState);
        
        FsItem[] EndGetFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/SaveFlowBitmap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSaveFlowBitmap(string fkFlow, string bitmapData, bool append, System.AsyncCallback callback, object asyncState);
        
        string EndSaveFlowBitmap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UploadFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUploadFlow(string fkFlow, string serverDirPath, string description, System.AsyncCallback callback, object asyncState);
        
        string EndUploadFlow(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FsFileItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string pathField;
        
        private string bitmapField;
        
        private bool isFolderField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
                this.RaisePropertyChanged("Path");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Bitmap {
            get {
                return this.bitmapField;
            }
            set {
                this.bitmapField = value;
                this.RaisePropertyChanged("Bitmap");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool IsFolder {
            get {
                return this.isFolderField;
            }
            set {
                this.isFolderField = value;
                this.RaisePropertyChanged("IsFolder");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FsItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string pathField;
        
        private bool isFolderField;
        
        private double sizeField;
        
        private System.DateTime lastModifyTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
                this.RaisePropertyChanged("Path");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsFolder {
            get {
                return this.isFolderField;
            }
            set {
                this.isFolderField = value;
                this.RaisePropertyChanged("IsFolder");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public double Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
                this.RaisePropertyChanged("Size");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime LastModifyTime {
            get {
                return this.lastModifyTimeField;
            }
            set {
                this.lastModifyTimeField = value;
                this.RaisePropertyChanged("LastModifyTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CYFtpSoapChannel : WF.CYFtpClient.CYFtpSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultFlowRootCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultFlowRootCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlowShareRootCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlowShareRootCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlowFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlowFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FsFileItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FsFileItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FsItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FsItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveFlowBitmapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveFlowBitmapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CYFtpSoapClient : System.ServiceModel.ClientBase<WF.CYFtpClient.CYFtpSoap>, WF.CYFtpClient.CYFtpSoap {
        
        private BeginOperationDelegate onBeginGetServerDelegate;
        
        private EndOperationDelegate onEndGetServerDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDefaultFlowRootDelegate;
        
        private EndOperationDelegate onEndGetDefaultFlowRootDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultFlowRootCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlowShareRootDelegate;
        
        private EndOperationDelegate onEndGetFlowShareRootDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlowShareRootCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadFileDelegate;
        
        private EndOperationDelegate onEndDownloadFileDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportFlowDelegate;
        
        private EndOperationDelegate onEndImportFlowDelegate;
        
        private System.Threading.SendOrPostCallback onImportFlowCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlowFilesDelegate;
        
        private EndOperationDelegate onEndGetFlowFilesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlowFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFoldersDelegate;
        
        private EndOperationDelegate onEndGetFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onGetFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFlowBitmapDelegate;
        
        private EndOperationDelegate onEndSaveFlowBitmapDelegate;
        
        private System.Threading.SendOrPostCallback onSaveFlowBitmapCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFlowDelegate;
        
        private EndOperationDelegate onEndUploadFlowDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFlowCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CYFtpSoapClient() {
        }
        
        public CYFtpSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CYFtpSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CYFtpSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CYFtpSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetServerCompletedEventArgs> GetServerCompleted;
        
        public event System.EventHandler<GetDefaultFlowRootCompletedEventArgs> GetDefaultFlowRootCompleted;
        
        public event System.EventHandler<GetFlowShareRootCompletedEventArgs> GetFlowShareRootCompleted;
        
        public event System.EventHandler<DownloadFileCompletedEventArgs> DownloadFileCompleted;
        
        public event System.EventHandler<ImportFlowCompletedEventArgs> ImportFlowCompleted;
        
        public event System.EventHandler<GetFlowFilesCompletedEventArgs> GetFlowFilesCompleted;
        
        public event System.EventHandler<GetFoldersCompletedEventArgs> GetFoldersCompleted;
        
        public event System.EventHandler<SaveFlowBitmapCompletedEventArgs> SaveFlowBitmapCompleted;
        
        public event System.EventHandler<UploadFlowCompletedEventArgs> UploadFlowCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginGetServer(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServer(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndGetServer(System.IAsyncResult result) {
            return base.Channel.EndGetServer(result);
        }
        
        private System.IAsyncResult OnBeginGetServer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginGetServer(callback, asyncState);
        }
        
        private object[] OnEndGetServer(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndGetServer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerCompleted(object state) {
            if ((this.GetServerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerCompleted(this, new GetServerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerAsync() {
            this.GetServerAsync(null);
        }
        
        public void GetServerAsync(object userState) {
            if ((this.onBeginGetServerDelegate == null)) {
                this.onBeginGetServerDelegate = new BeginOperationDelegate(this.OnBeginGetServer);
            }
            if ((this.onEndGetServerDelegate == null)) {
                this.onEndGetServerDelegate = new EndOperationDelegate(this.OnEndGetServer);
            }
            if ((this.onGetServerCompletedDelegate == null)) {
                this.onGetServerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerDelegate, null, this.onEndGetServerDelegate, this.onGetServerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginGetDefaultFlowRoot(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultFlowRoot(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndGetDefaultFlowRoot(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultFlowRoot(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultFlowRoot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginGetDefaultFlowRoot(callback, asyncState);
        }
        
        private object[] OnEndGetDefaultFlowRoot(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndGetDefaultFlowRoot(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultFlowRootCompleted(object state) {
            if ((this.GetDefaultFlowRootCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultFlowRootCompleted(this, new GetDefaultFlowRootCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultFlowRootAsync() {
            this.GetDefaultFlowRootAsync(null);
        }
        
        public void GetDefaultFlowRootAsync(object userState) {
            if ((this.onBeginGetDefaultFlowRootDelegate == null)) {
                this.onBeginGetDefaultFlowRootDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultFlowRoot);
            }
            if ((this.onEndGetDefaultFlowRootDelegate == null)) {
                this.onEndGetDefaultFlowRootDelegate = new EndOperationDelegate(this.OnEndGetDefaultFlowRoot);
            }
            if ((this.onGetDefaultFlowRootCompletedDelegate == null)) {
                this.onGetDefaultFlowRootCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultFlowRootCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultFlowRootDelegate, null, this.onEndGetDefaultFlowRootDelegate, this.onGetDefaultFlowRootCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginGetFlowShareRoot(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlowShareRoot(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndGetFlowShareRoot(System.IAsyncResult result) {
            return base.Channel.EndGetFlowShareRoot(result);
        }
        
        private System.IAsyncResult OnBeginGetFlowShareRoot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginGetFlowShareRoot(callback, asyncState);
        }
        
        private object[] OnEndGetFlowShareRoot(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndGetFlowShareRoot(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlowShareRootCompleted(object state) {
            if ((this.GetFlowShareRootCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlowShareRootCompleted(this, new GetFlowShareRootCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlowShareRootAsync() {
            this.GetFlowShareRootAsync(null);
        }
        
        public void GetFlowShareRootAsync(object userState) {
            if ((this.onBeginGetFlowShareRootDelegate == null)) {
                this.onBeginGetFlowShareRootDelegate = new BeginOperationDelegate(this.OnBeginGetFlowShareRoot);
            }
            if ((this.onEndGetFlowShareRootDelegate == null)) {
                this.onEndGetFlowShareRootDelegate = new EndOperationDelegate(this.OnEndGetFlowShareRoot);
            }
            if ((this.onGetFlowShareRootCompletedDelegate == null)) {
                this.onGetFlowShareRootCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlowShareRootCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlowShareRootDelegate, null, this.onEndGetFlowShareRootDelegate, this.onGetFlowShareRootCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginDownloadFile(string srcFilePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadFile(srcFilePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndDownloadFile(System.IAsyncResult result) {
            return base.Channel.EndDownloadFile(result);
        }
        
        private System.IAsyncResult OnBeginDownloadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string srcFilePath = ((string)(inValues[0]));
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginDownloadFile(srcFilePath, callback, asyncState);
        }
        
        private object[] OnEndDownloadFile(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndDownloadFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadFileCompleted(object state) {
            if ((this.DownloadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadFileAsync(string srcFilePath) {
            this.DownloadFileAsync(srcFilePath, null);
        }
        
        public void DownloadFileAsync(string srcFilePath, object userState) {
            if ((this.onBeginDownloadFileDelegate == null)) {
                this.onBeginDownloadFileDelegate = new BeginOperationDelegate(this.OnBeginDownloadFile);
            }
            if ((this.onEndDownloadFileDelegate == null)) {
                this.onEndDownloadFileDelegate = new EndOperationDelegate(this.OnEndDownloadFile);
            }
            if ((this.onDownloadFileCompletedDelegate == null)) {
                this.onDownloadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadFileDelegate, new object[] {
                        srcFilePath}, this.onEndDownloadFileDelegate, this.onDownloadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginImportFlow(string path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportFlow(path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndImportFlow(System.IAsyncResult result) {
            return base.Channel.EndImportFlow(result);
        }
        
        private System.IAsyncResult OnBeginImportFlow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginImportFlow(path, callback, asyncState);
        }
        
        private object[] OnEndImportFlow(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndImportFlow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportFlowCompleted(object state) {
            if ((this.ImportFlowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportFlowCompleted(this, new ImportFlowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportFlowAsync(string path) {
            this.ImportFlowAsync(path, null);
        }
        
        public void ImportFlowAsync(string path, object userState) {
            if ((this.onBeginImportFlowDelegate == null)) {
                this.onBeginImportFlowDelegate = new BeginOperationDelegate(this.OnBeginImportFlow);
            }
            if ((this.onEndImportFlowDelegate == null)) {
                this.onEndImportFlowDelegate = new EndOperationDelegate(this.OnEndImportFlow);
            }
            if ((this.onImportFlowCompletedDelegate == null)) {
                this.onImportFlowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportFlowCompleted);
            }
            base.InvokeAsync(this.onBeginImportFlowDelegate, new object[] {
                        path}, this.onEndImportFlowDelegate, this.onImportFlowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginGetFlowFiles(string serverDirectoryPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlowFiles(serverDirectoryPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FsFileItem[] WF.CYFtpClient.CYFtpSoap.EndGetFlowFiles(System.IAsyncResult result) {
            return base.Channel.EndGetFlowFiles(result);
        }
        
        private System.IAsyncResult OnBeginGetFlowFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverDirectoryPath = ((string)(inValues[0]));
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginGetFlowFiles(serverDirectoryPath, callback, asyncState);
        }
        
        private object[] OnEndGetFlowFiles(System.IAsyncResult result) {
            FsFileItem[] retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndGetFlowFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlowFilesCompleted(object state) {
            if ((this.GetFlowFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlowFilesCompleted(this, new GetFlowFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlowFilesAsync(string serverDirectoryPath) {
            this.GetFlowFilesAsync(serverDirectoryPath, null);
        }
        
        public void GetFlowFilesAsync(string serverDirectoryPath, object userState) {
            if ((this.onBeginGetFlowFilesDelegate == null)) {
                this.onBeginGetFlowFilesDelegate = new BeginOperationDelegate(this.OnBeginGetFlowFiles);
            }
            if ((this.onEndGetFlowFilesDelegate == null)) {
                this.onEndGetFlowFilesDelegate = new EndOperationDelegate(this.OnEndGetFlowFiles);
            }
            if ((this.onGetFlowFilesCompletedDelegate == null)) {
                this.onGetFlowFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlowFilesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlowFilesDelegate, new object[] {
                        serverDirectoryPath}, this.onEndGetFlowFilesDelegate, this.onGetFlowFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginGetFolders(string serverDirectoryPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolders(serverDirectoryPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FsItem[] WF.CYFtpClient.CYFtpSoap.EndGetFolders(System.IAsyncResult result) {
            return base.Channel.EndGetFolders(result);
        }
        
        private System.IAsyncResult OnBeginGetFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverDirectoryPath = ((string)(inValues[0]));
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginGetFolders(serverDirectoryPath, callback, asyncState);
        }
        
        private object[] OnEndGetFolders(System.IAsyncResult result) {
            FsItem[] retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndGetFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFoldersCompleted(object state) {
            if ((this.GetFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFoldersAsync(string serverDirectoryPath) {
            this.GetFoldersAsync(serverDirectoryPath, null);
        }
        
        public void GetFoldersAsync(string serverDirectoryPath, object userState) {
            if ((this.onBeginGetFoldersDelegate == null)) {
                this.onBeginGetFoldersDelegate = new BeginOperationDelegate(this.OnBeginGetFolders);
            }
            if ((this.onEndGetFoldersDelegate == null)) {
                this.onEndGetFoldersDelegate = new EndOperationDelegate(this.OnEndGetFolders);
            }
            if ((this.onGetFoldersCompletedDelegate == null)) {
                this.onGetFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginGetFoldersDelegate, new object[] {
                        serverDirectoryPath}, this.onEndGetFoldersDelegate, this.onGetFoldersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginSaveFlowBitmap(string fkFlow, string bitmapData, bool append, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFlowBitmap(fkFlow, bitmapData, append, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndSaveFlowBitmap(System.IAsyncResult result) {
            return base.Channel.EndSaveFlowBitmap(result);
        }
        
        private System.IAsyncResult OnBeginSaveFlowBitmap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fkFlow = ((string)(inValues[0]));
            string bitmapData = ((string)(inValues[1]));
            bool append = ((bool)(inValues[2]));
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginSaveFlowBitmap(fkFlow, bitmapData, append, callback, asyncState);
        }
        
        private object[] OnEndSaveFlowBitmap(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndSaveFlowBitmap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveFlowBitmapCompleted(object state) {
            if ((this.SaveFlowBitmapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFlowBitmapCompleted(this, new SaveFlowBitmapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFlowBitmapAsync(string fkFlow, string bitmapData, bool append) {
            this.SaveFlowBitmapAsync(fkFlow, bitmapData, append, null);
        }
        
        public void SaveFlowBitmapAsync(string fkFlow, string bitmapData, bool append, object userState) {
            if ((this.onBeginSaveFlowBitmapDelegate == null)) {
                this.onBeginSaveFlowBitmapDelegate = new BeginOperationDelegate(this.OnBeginSaveFlowBitmap);
            }
            if ((this.onEndSaveFlowBitmapDelegate == null)) {
                this.onEndSaveFlowBitmapDelegate = new EndOperationDelegate(this.OnEndSaveFlowBitmap);
            }
            if ((this.onSaveFlowBitmapCompletedDelegate == null)) {
                this.onSaveFlowBitmapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFlowBitmapCompleted);
            }
            base.InvokeAsync(this.onBeginSaveFlowBitmapDelegate, new object[] {
                        fkFlow,
                        bitmapData,
                        append}, this.onEndSaveFlowBitmapDelegate, this.onSaveFlowBitmapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WF.CYFtpClient.CYFtpSoap.BeginUploadFlow(string fkFlow, string serverDirPath, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFlow(fkFlow, serverDirPath, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WF.CYFtpClient.CYFtpSoap.EndUploadFlow(System.IAsyncResult result) {
            return base.Channel.EndUploadFlow(result);
        }
        
        private System.IAsyncResult OnBeginUploadFlow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fkFlow = ((string)(inValues[0]));
            string serverDirPath = ((string)(inValues[1]));
            string description = ((string)(inValues[2]));
            return ((WF.CYFtpClient.CYFtpSoap)(this)).BeginUploadFlow(fkFlow, serverDirPath, description, callback, asyncState);
        }
        
        private object[] OnEndUploadFlow(System.IAsyncResult result) {
            string retVal = ((WF.CYFtpClient.CYFtpSoap)(this)).EndUploadFlow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadFlowCompleted(object state) {
            if ((this.UploadFlowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFlowCompleted(this, new UploadFlowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFlowAsync(string fkFlow, string serverDirPath, string description) {
            this.UploadFlowAsync(fkFlow, serverDirPath, description, null);
        }
        
        public void UploadFlowAsync(string fkFlow, string serverDirPath, string description, object userState) {
            if ((this.onBeginUploadFlowDelegate == null)) {
                this.onBeginUploadFlowDelegate = new BeginOperationDelegate(this.OnBeginUploadFlow);
            }
            if ((this.onEndUploadFlowDelegate == null)) {
                this.onEndUploadFlowDelegate = new EndOperationDelegate(this.OnEndUploadFlow);
            }
            if ((this.onUploadFlowCompletedDelegate == null)) {
                this.onUploadFlowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFlowCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFlowDelegate, new object[] {
                        fkFlow,
                        serverDirPath,
                        description}, this.onEndUploadFlowDelegate, this.onUploadFlowCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WF.CYFtpClient.CYFtpSoap CreateChannel() {
            return new CYFtpSoapClientChannel(this);
        }
        
        private class CYFtpSoapClientChannel : ChannelBase<WF.CYFtpClient.CYFtpSoap>, WF.CYFtpClient.CYFtpSoap {
            
            public CYFtpSoapClientChannel(System.ServiceModel.ClientBase<WF.CYFtpClient.CYFtpSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetServer(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServer", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetServer(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetServer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDefaultFlowRoot(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDefaultFlowRoot", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDefaultFlowRoot(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDefaultFlowRoot", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFlowShareRoot(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFlowShareRoot", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFlowShareRoot(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetFlowShareRoot", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadFile(string srcFilePath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = srcFilePath;
                System.IAsyncResult _result = base.BeginInvoke("DownloadFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDownloadFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DownloadFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportFlow(string path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = path;
                System.IAsyncResult _result = base.BeginInvoke("ImportFlow", _args, callback, asyncState);
                return _result;
            }
            
            public string EndImportFlow(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ImportFlow", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFlowFiles(string serverDirectoryPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serverDirectoryPath;
                System.IAsyncResult _result = base.BeginInvoke("GetFlowFiles", _args, callback, asyncState);
                return _result;
            }
            
            public FsFileItem[] EndGetFlowFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                FsFileItem[] _result = ((FsFileItem[])(base.EndInvoke("GetFlowFiles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolders(string serverDirectoryPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serverDirectoryPath;
                System.IAsyncResult _result = base.BeginInvoke("GetFolders", _args, callback, asyncState);
                return _result;
            }
            
            public FsItem[] EndGetFolders(System.IAsyncResult result) {
                object[] _args = new object[0];
                FsItem[] _result = ((FsItem[])(base.EndInvoke("GetFolders", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveFlowBitmap(string fkFlow, string bitmapData, bool append, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fkFlow;
                _args[1] = bitmapData;
                _args[2] = append;
                System.IAsyncResult _result = base.BeginInvoke("SaveFlowBitmap", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveFlowBitmap(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveFlowBitmap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadFlow(string fkFlow, string serverDirPath, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fkFlow;
                _args[1] = serverDirPath;
                _args[2] = description;
                System.IAsyncResult _result = base.BeginInvoke("UploadFlow", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUploadFlow(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UploadFlow", _args, result)));
                return _result;
            }
        }
    }
}
